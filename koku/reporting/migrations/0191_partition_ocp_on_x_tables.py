#
# Copyright 2021 Red Hat Inc.
# SPDX-License-Identifier: Apache-2.0
#
# Generated by Django 3.1.10 on 2021-05-17 19:48
import logging
import pkgutil

from django.db import migrations

from reporting.provider.all.openshift.models import VIEWS as OCP_ALL_VIEWS
from reporting.provider.aws.openshift.models import VIEWS as OCP_AWS_VIEWS
from reporting.provider.azure.openshift.models import VIEWS as OCP_AZURE_VIEWS


LOG = logging.getLogger(__name__)


CACHE = {}


def check_partitioned(apps, schema_editor):
    conn = schema_editor.connection
    sql = """
SELECT c.relname::text,
       (c.relkind = 'p')::boolean as "is_partitioned"
  FROM pg_class c
  JOIN pg_namespace n
    ON n.oid = c.relnamespace
 WHERE n.nspname = current_schema
   AND c.relname = any(array['reporting_ocpawscostlineitem_daily_summary',
                             'reporting_ocpawscostlineitem_project_daily_summary',
                             'reporting_ocpazurecostlineitem_daily_summary',
                             'reporting_ocpazurecostlineitem_project_daily_summary']::text[]) ;
"""
    with conn.cursor() as cur:
        cur.execute(sql)
        for rec in cur.fetchall():
            CACHE[rec[0]] = rec[1]


def execute_sql_stmts(conn, sql_stmts):
    for stmts in sql_stmts:
        LOG.info(stmts.pop(0))
        for stmt in stmts:
            if isinstance(stmt, (tuple, list)):
                stmt, params = stmt
            else:
                params = None
            with conn.cursor() as cur:
                cur.execute(stmt, params)


def create_ocpaws_views(apps, schema_editor):
    if any(CACHE.values()):
        LOG.warning("SKIPPING CREATE OCP ON AWS VIEWS")
        return

    connection = schema_editor.connection

    for view in OCP_AWS_VIEWS:
        view_sql = pkgutil.get_data("reporting.provider.aws.openshift", f"sql/views/{view}.sql")
        view_sql = view_sql.decode("utf-8")
        LOG.info(f"""Creating materialized view "{view}"...""")
        with connection.cursor() as cursor:
            cursor.execute(view_sql)


def create_ocpazure_views(apps, schema_editor):
    if any(CACHE.values()):
        LOG.warning("SKIPPING CREATE OCP ON AZURE VIEWS")
        return

    connection = schema_editor.connection

    for view in OCP_AZURE_VIEWS:
        view_sql = pkgutil.get_data("reporting.provider.azure.openshift", f"sql/views/{view}.sql")
        view_sql = view_sql.decode("utf-8")
        LOG.info(f"""Creating materialized view "{view}"...""")
        with connection.cursor() as cursor:
            cursor.execute(view_sql)


def create_ocpall_views(apps, schema_editor):
    if any(CACHE.values()):
        LOG.warning("SKIPPING CREATE OCP ON ALL VIEWS")
        return

    connection = schema_editor.connection

    for view in OCP_ALL_VIEWS:
        view_sql = pkgutil.get_data("reporting.provider.all.openshift", f"sql/views/{view}.sql")
        view_sql = view_sql.decode("utf-8")
        LOG.info(f"""Creating materialized view "{view}"...""")
        with connection.cursor() as cursor:
            cursor.execute(view_sql)


def create_ocpaws_partitions(apps, schema_editor):
    if CACHE.get("reporting_ocpawscostlineitem_daily_summary"):
        table_name = "reporting_ocpawscostlineitem_daily_summary"
    else:
        table_name = "p_reporting_ocpawscostlineitem_daily_summary"
    connection = schema_editor.connection

    sql_stmts = [
        [
            f"Creating default partitioin for {table_name}",
            (
                f"""
INSERT
  INTO partitioned_tables
       (
           schema_name,
           table_name,
           partition_of_table_name,
           partition_type,
           partition_col,
           partition_parameters,
           active
       )
VALUES (
           current_schema,
           'reporting_ocpawscostlineitem_daily_default',
           %s,
           'range',
           'usage_start',
           '{"default": true}'::jsonb,
           true
       )
    ON CONFLICT (schema_name, table_name)
       DO NOTHING;
""",
                (table_name,),
            ),
        ],
        [
            "Creating needed monthly partitions for p_reporting_ocpawscostlineitem_daily_summary",
            (
                r"""
INSERT
  INTO partitioned_tables
       (
           schema_name,
           table_name,
           partition_of_table_name,
           partition_type,
           partition_col,
           partition_parameters,
           active
       )
WITH partition_start_values as (
SELECT DISTINCT
       to_char(usage_start, 'YYYY-MM-01') as usage_start
  FROM reporting_ocpawscostlineitem_daily_summary
)
SELECT current_schema,
       format(
           'reporting_ocpawscostlineitem_daily_summary_%%s',
           regexp_replace(usage_start, '(\d{4}).(\d{2}).*', '\1_\2')
       )::text,
       %s,
       'range',
       'usage_start',
       format(
           '{"default": false, "from": %I, "to": %I}',
           usage_start,
           to_char((usage_start::date + '1 month'::interval), 'YYYY-MM-01')
       )::jsonb,
       true
  FROM partition_start_values
    ON CONFLICT (schema_name, table_name)
       DO NOTHING;
""",
                (table_name,),
            ),
        ],
    ]

    execute_sql_stmts(connection, sql_stmts)


def activate_ocpaws_partitioned_table(apps, schema_editor):
    if CACHE.get("reporting_ocpawscostlineitem_daily_summary"):
        LOG.warning("TABLE reporting_ocpawscostlineitem_daily_summary IS PARTITIONED. SKIP ACTIVATE.")
        return

    connection = schema_editor.connection
    sql_stmts = [
        [
            "Actvate partitioned table p_reporting_ocpawscostlineitem_daily_summary (LOCK RISK)",
            """
ALTER TABLE reporting_ocpawscostlineitem_daily_summary
      RENAME TO __reporting_ocpawscostlineitem_daily_summary;
""",
            """
UPDATE partitioned_tables
   SET partition_of_table_name = 'reporting_ocpawscostlineitem_daily_summary'
 WHERE partition_of_table_name = 'p_reporting_ocpawscostlineitem_daily_summary';
""",
        ]
    ]

    execute_sql_stmts(connection, sql_stmts)


def create_ocpaws_project_partitions(apps, schema_editor):
    if CACHE.get("reporting_ocpawscostlineitem_project_daily_summary"):
        table_name = "reporting_ocpawscostlineitem_project_daily_summary"
    else:
        table_name = "p_reporting_ocpawscostlineitem_project_daily_summary"
    connection = schema_editor.connection

    sql_stmts = [
        [
            "Creating default partition for p_reporting_ocpawscostlineitem_project_daily_summary",
            (
                """
INSERT
  INTO partitioned_tables
       (
           schema_name,
           table_name,
           partition_of_table_name,
           partition_type,
           partition_col,
           partition_parameters,
           active
       )
VALUES (
           current_schema,
           'reporting_ocpawscostlineitem_project_daily_summary_default',
           %s,
           'range',
           'usage_start',
           '{"default": true}'::jsonb,
           true
       )
    ON CONFLICT (schema_name, table_name)
       DO NOTHING;
""",
                (table_name,),
            ),
        ],
        [
            "Creating needed monthly partitions for p_reporting_ocpawscostlineitem_project_daily_summary",
            (
                r"""
INSERT
  INTO partitioned_tables
       (
           schema_name,
           table_name,
           partition_of_table_name,
           partition_type,
           partition_col,
           partition_parameters,
           active
       )
WITH partition_start_values as (
SELECT DISTINCT
       to_char(usage_start, 'YYYY-MM-01') as usage_start
  FROM reporting_ocpawscostlineitem_project_daily_summary
)
SELECT current_schema,
       format(
           'reporting_ocpawscostlineitem_project_daily_summary_%%s',
           regexp_replace(usage_start, '(\d{4}).(\d{2}).*', '\1_\2')
       )::text,
       %s,
       'range',
       'usage_start',
       format(
           '{"default": false, "from": %I, "to": %I}',
           usage_start,
           to_char((usage_start::date + '1 month'::interval), 'YYYY-MM-01')
       )::jsonb,
       true
  FROM partition_start_values
    ON CONFLICT (schema_name, table_name)
       DO NOTHING;
""",
                (table_name,),
            ),
        ],
    ]

    execute_sql_stmts(connection, sql_stmts)


def activate_ocpaws_project_partitioned_table(apps, schema_editor):
    if CACHE.get("reporting_ocpawscostlineitem_project_daily_summary"):
        LOG.warning("TABLE reporting_ocpawscostlineitem_project_daily_summary IS PARTITIONED. SKIP ACTIVATE.")
        return

    connection = schema_editor.connection
    sql_stmts = [
        [
            "Actvate partitioned table p_reporting_ocpawscostlineitem_project_daily_summary (LOCK RISK)",
            """
ALTER TABLE reporting_ocpawscostlineitem_project_daily_summary
      RENAME TO __reporting_ocpawscostlineitem_project_daily_summary;
""",
            """
UPDATE partitioned_tables
   SET partition_of_table_name = 'reporting_ocpawscostlineitem_project_daily_summary'
 WHERE partition_of_table_name = 'p_reporting_ocpawscostlineitem_project_daily_summary';
""",
        ]
    ]

    execute_sql_stmts(connection, sql_stmts)


def create_ocpazure_partitions(apps, schema_editor):
    if CACHE.get("reporting_ocpazurecostlineitem_daily_summary"):
        table_name = "reporting_ocpazurecostlineitem_daily_summary"
    else:
        table_name = "p_reporting_ocpazurecostlineitem_daily_summary"
    connection = schema_editor.connection

    sql_stmts = [
        [
            "Creating default partition for p_reporting_ocpazurecostlineitem_daily_summary",
            (
                """
INSERT
  INTO partitioned_tables
       (
           schema_name,
           table_name,
           partition_of_table_name,
           partition_type,
           partition_col,
           partition_parameters,
           active
       )
VALUES (
           current_schema,
           'reporting_ocpazurecostlineitem_daily_default',
           %s,
           'range',
           'usage_start',
           '{"default": true}'::jsonb,
           true
       )
    ON CONFLICT (schema_name, table_name)
       DO NOTHING;
""",
                (table_name,),
            ),
        ],
        [
            "Creating needed monthly partitions for p_reporting_ocpazurecostlineitem_daily_summary",
            (
                r"""
INSERT
  INTO partitioned_tables
       (
           schema_name,
           table_name,
           partition_of_table_name,
           partition_type,
           partition_col,
           partition_parameters,
           active
       )
WITH partition_start_values as (
SELECT DISTINCT
       to_char(usage_start, 'YYYY-MM-01') as usage_start
  FROM reporting_ocpazurecostlineitem_daily_summary
)
SELECT current_schema,
       format(
           'reporting_ocpazurecostlineitem_daily_summary_%%s',
           regexp_replace(usage_start, '(\d{4}).(\d{2}).*', '\1_\2')
       )::text,
       %s,
       'range',
       'usage_start',
       format(
           '{"default": false, "from": %I, "to": %I}',
           usage_start,
           to_char((usage_start::date + '1 month'::interval), 'YYYY-MM-01')
       )::jsonb,
       true
  FROM partition_start_values
    ON CONFLICT (schema_name, table_name)
       DO NOTHING;
""",
                (table_name,),
            ),
        ],
    ]

    execute_sql_stmts(connection, sql_stmts)


def activate_ocpazure_partitioned_table(apps, schema_editor):
    if CACHE.get("reporting_ocpazurecostlineitem_daily_summary"):
        LOG.warning("TABLE reporting_ocpazurecostlineitem_daily_summary IS PARTITIONED. SKIP ACTIVATE.")
        return

    connection = schema_editor.connection
    sql_stmts = [
        [
            "Actvate partitioned table p_reporting_ocpazurecostlineitem_daily_summary (LOCK RISK)",
            """
ALTER TABLE reporting_ocpazurecostlineitem_daily_summary
      RENAME TO __reporting_ocpazurecostlineitem_daily_summary;
""",
            """
UPDATE partitioned_tables
   SET partition_of_table_name = 'reporting_ocpazurecostlineitem_daily_summary'
 WHERE partition_of_table_name = 'p_reporting_ocpazurecostlineitem_daily_summary';
""",
        ]
    ]

    execute_sql_stmts(connection, sql_stmts)


def create_ocpazure_project_partitions(apps, schema_editor):
    if CACHE.get("reporting_ocpazurecostlineitem_daily_summary"):
        table_name = "reporting_ocpazurecostlineitem_daily_summary"
    else:
        table_name = "p_reporting_ocpazurecostlineitem_daily_summary"
    connection = schema_editor.connection

    sql_stmts = [
        [
            "Creating default partition for p_reporting_ocpazurecostlineitem_project_daily_summary",
            (
                """
INSERT
  INTO partitioned_tables
       (
           schema_name,
           table_name,
           partition_of_table_name,
           partition_type,
           partition_col,
           partition_parameters,
           active
       )
VALUES (
           current_schema,
           'reporting_ocpazurecostlineitem_project_daily_summary_default',
           %s,
           'range',
           'usage_start',
           '{"default": true}'::jsonb,
           true
       )
    ON CONFLICT (schema_name, table_name)
       DO NOTHING;
""",
                (table_name,),
            ),
        ],
        [
            "Creating needed monthly partitions for p_reporting_ocpazurecostlineitem_project_daily_summary",
            (
                r"""
INSERT
  INTO partitioned_tables
       (
           schema_name,
           table_name,
           partition_of_table_name,
           partition_type,
           partition_col,
           partition_parameters,
           active
       )
WITH partition_start_values as (
SELECT DISTINCT
       to_char(usage_start, 'YYYY-MM-01') as usage_start
  FROM reporting_ocpazurecostlineitem_project_daily_summary
)
SELECT current_schema,
       format(
           'reporting_ocpazurecostlineitem_project_daily_summary_%%s',
           regexp_replace(usage_start, '(\d{4}).(\d{2}).*', '\1_\2')
       )::text,
       %s,
       'range',
       'usage_start',
       format(
           '{"default": false, "from": %I, "to": %I}',
           usage_start,
           to_char((usage_start::date + '1 month'::interval), 'YYYY-MM-01')
       )::jsonb,
       true
  FROM partition_start_values
    ON CONFLICT (schema_name, table_name)
       DO NOTHING;
""",
                (table_name,),
            ),
        ],
    ]

    execute_sql_stmts(connection, sql_stmts)


def activate_ocpazure_project_partitioned_table(apps, schema_editor):
    if CACHE.get("reporting_ocpazurecostlineitem_project_daily_summary"):
        LOG.warning("TABLE reporting_ocpazurecostlineitem_project_daily_summary IS PARTITIONED. SKIP ACTIVATE.")
        return

    connection = schema_editor.connection
    sql_stmts = [
        [
            "Actvate partitioned table p_reporting_ocpazurecostlineitem_project_daily_summary (LOCK RISK)",
            """
ALTER TABLE reporting_ocpazurecostlineitem_project_daily_summary
      RENAME TO __reporting_ocpazurecostlineitem_project_daily_summary;
""",
            """
UPDATE partitioned_tables
   SET partition_of_table_name = 'reporting_ocpazurecostlineitem_project_daily_summary'
 WHERE partition_of_table_name = 'p_reporting_ocpazurecostlineitem_project_daily_summary';
""",
        ]
    ]

    execute_sql_stmts(connection, sql_stmts)


def copy_ocpaws_project_data(apps, schema_editor):
    if CACHE.get("reporting_ocpawscostlineitem_project_daily_summary"):
        LOG.warning("SKIP COPY TO PARTITIONED TABLE reporting_ocpawscostlineitem_project_daily_summary")
        return

    connection = schema_editor.connection
    sql_stmts = [
        [
            "Copying data from old table into reporting_ocpawscostlineitem_project_daily_summary",
            """
INSERT
  INTO reporting_ocpawscostlineitem_project_daily_summary
SELECT *
  FROM __reporting_ocpawscostlineitem_project_daily_summary;
""",
        ]
    ]

    execute_sql_stmts(connection, sql_stmts)


def copy_ocpaws_data(apps, schema_editor):
    if CACHE.get("reporting_ocpawscostlineitem_daily_summary"):
        LOG.warning("SKIP COPY TO PARTITIONED TABLE reporting_ocpawscostlineitem_daily_summary")
        return

    connection = schema_editor.connection
    sql_stmts = [
        [
            "Copying data from old table into reporting_ocpawscostlineitem_daily_summary",
            """
INSERT
  INTO reporting_ocpawscostlineitem_daily_summary
SELECT *
  FROM __reporting_ocpawscostlineitem_daily_summary;
""",
        ]
    ]

    execute_sql_stmts(connection, sql_stmts)


def copy_ocpazure_project_data(apps, schema_editor):
    if CACHE.get("reporting_ocpazurecostlineitem_project_daily_summary"):
        LOG.warning("SKIP COPY TO PARTITIONED TABLE reporting_ocpazurecostlineitem_project_daily_summary")
        return

    connection = schema_editor.connection
    sql_stmts = [
        [
            "Copying data from old table into reporting_ocpazurecostlineitem_project_daily_summary",
            """
INSERT
  INTO reporting_ocpazurecostlineitem_project_daily_summary
SELECT *
  FROM __reporting_ocpazurecostlineitem_project_daily_summary;
""",
        ]
    ]

    execute_sql_stmts(connection, sql_stmts)


def copy_ocpazure_data(apps, schema_editor):
    if CACHE.get("reporting_ocpazurecostlineitem_daily_summary"):
        LOG.warning("SKIP COPY TO PARTITIONED TABLE reporting_ocpazurecostlineitem_daily_summary")
        return

    connection = schema_editor.connection
    sql_stmts = [
        [
            "Copying data from old table into reporting_ocpazurecostlineitem_daily_summary",
            """
INSERT
  INTO reporting_ocpazurecostlineitem_daily_summary
SELECT *
  FROM __reporting_ocpazurecostlineitem_daily_summary;
""",
        ]
    ]

    execute_sql_stmts(connection, sql_stmts)


def rename_old_matviews(apps, schema_editor):
    if any(CACHE.values()):
        LOG.warning("SKIPPING RENAME EXISTING MATERIALIZED VIEWS")
        return

    connection = schema_editor.connection
    for view in reversed(OCP_AWS_VIEWS + OCP_AZURE_VIEWS + OCP_ALL_VIEWS):
        LOG.info(f"Reaming existing materialized view {view}")
        with connection.cursor() as cur:
            cur.execute(f"""ALTER MATERIALIZED VIEW IF EXISTS {view} RENAME TO __{view} ;""")


class Migration(migrations.Migration):

    dependencies = [("reporting", "0189_auto_20210803_2056")]

    operations = [
        migrations.AlterModelOptions(name="ocpawscostlineitemdailysummary", options={"managed": False}),
        migrations.AlterModelOptions(name="ocpawscostlineitemprojectdailysummary", options={"managed": False}),
        migrations.AlterModelOptions(name="ocpazurecostlineitemdailysummary", options={"managed": False}),
        migrations.AlterModelOptions(name="ocpazurecostlineitemprojectdailysummary", options={"managed": False}),
        migrations.RunPython(code=check_partitioned),
        migrations.RunPython(code=create_ocpaws_partitions),
        migrations.RunPython(code=activate_ocpaws_partitioned_table),
        migrations.RunPython(code=create_ocpaws_project_partitions),
        migrations.RunPython(code=activate_ocpaws_project_partitioned_table),
        migrations.RunPython(code=create_ocpazure_partitions),
        migrations.RunPython(code=activate_ocpazure_partitioned_table),
        migrations.RunPython(code=create_ocpazure_project_partitions),
        migrations.RunPython(code=activate_ocpazure_project_partitioned_table),
        migrations.RunPython(code=copy_ocpaws_project_data),
        migrations.RunPython(code=copy_ocpaws_data),
        migrations.RunPython(code=copy_ocpazure_project_data),
        migrations.RunPython(code=copy_ocpazure_data),
        migrations.RunPython(code=rename_old_matviews),
        migrations.RunPython(code=create_ocpaws_views),
        migrations.RunPython(code=create_ocpazure_views),
        migrations.RunPython(code=create_ocpall_views),
    ]
