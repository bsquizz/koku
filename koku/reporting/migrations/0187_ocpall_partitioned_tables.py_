# Generated by Django 3.1.13 on 2021-07-22 14:07
import logging

from django.db import migrations

from koku import pg_partition as ppart


LOG = logging.getLogger(__name__)
CACHE = {}


def resolve_schema(*args, **kwargs):
    CACHE["schema"] = ppart.resolve_schema(ppart.CURRENT_SCHEMA)
    LOG.info(f"Caching schema {CACHE['schema']}")


# =====================================================
# Change reporting_ocpusagelineitem_daily_summary
# to a partitioned table with the same definition
# =====================================================
def convert_matview_to_partitioned_table(matview_name, partition_col, pk_def, col_defs, column_map={}, indexes=[], constraints=[]):
    # Resolve the current schema name
    target_schema = CACHE['schema']
    source_table = matview_name
    target_table = f"p_{source_table}"

    # Init the converter
    p_converter = ppart.ConvertToPartition(
        source_table,
        partition_col,
        target_table_name=target_table,
        partition_type=ppart.PARTITION_RANGE,
        pk_def=pk_def,
        col_def=col_defs,
        target_schema=target_schema,
        source_schema=target_schema,
        indexops={"override": indexes},
        constraintops={"override": constraints},
        column_map=column_map,
    )

    # Push the button, Frank.
    LOG.info(f"Converting materialized view {matview_name} to a partitioned table")
    p_converter.convert_to_partition()


def convert_reporting_ocpall_compute_summary(apps, schema_editor):
    matview_name = 'reporting_ocpall_compute_summary'
    target_table = "p_" + matview_name
    LOG.info(f"Preparing to convert materialized view {matview_name} to a partitioned table")
    pk_name = f"{matview_name[len('reporting_'):]}_pkey"
    pk_def = ppart.PKDefinition(pk_name, ["usage_start", "id"])
    col_def = [
        ppart.ColumnDefinition(
            CACHE["schema"],
            target_table,
            "id",
            data_type="uuid",
            using="uuid_generate_v4()",
            null=False,
            default=ppart.Default('uuid_generate_v4()'),
        ),
    ]
    override_constraints = [
        ppart.ConstraintDefinition(
            CACHE["schema"], target_table, {
                "constraint_name": "ocpallcost_acct_summ_comp_fk",
                "constraint_type": 'f',
                "constraint_columns": None,
                "definition": """
FOREIGN KEY (account_alias_id) REFERENCES reporting_awsaccountalias(id) DEFERRABLE INITIALLY DEFERRED
""",
            }
        )
    ]
    override_indexes = [
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_comp_cluster_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_comp_cluster_id ON reporting_ocpall_compute_summary USING btree (cluster_id) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_comp_cluster_alias",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_comp_cluster_alias ON reporting_ocpall_compute_summary USING btree (cluster_alias) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_comp_cluster_alias_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_comp_cluster_alias_ilike ON reporting_ocpall_compute_summary USING gin (upper((cluster_alias)::text) gin_trgm_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_comp_account_id_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_comp_account_id_ilike ON reporting_ocpall_compute_summary USING gin (upper((usage_account_id)::text) gin_trgm_ops) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_comp_account_alias_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_account_account_alias_id ON reporting_ocpall_compute_summary USING btree (account_alias_id);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_comp_product_code",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_comp_product_code ON reporting_ocpall_compute_summary USING btree (product_code) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_comp_product_code_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_comp_product_code_ilike ON reporting_ocpall_compute_summary USING gin (upper((product_code)::text) gin_trgm_ops);
""",
            }
        ),
    ]
    cols = ppart.ConvertToPartition.get_table_columns(CACHE["schema"], matview_name)
    cols.remove('id')
    column_map = dict(zip(cols, cols))

    convert_matview_to_partitioned_table(
        matview_name,
        "usage_start",
        pk_def,
        col_def,
        indexes=override_indexes,
        column_map=column_map,
        constraints=override_constraints
    )


def convert_reporting_ocpall_network_summary(apps, schema_editor):
    matview_name = 'reporting_ocpall_network_summary'
    target_table = "p_" + matview_name
    LOG.info(f"Preparing to convert materialized view {matview_name} to a partitioned table")
    pk_name = f"{matview_name[len('reporting_'):]}_pkey"
    pk_def = ppart.PKDefinition(pk_name, ["usage_start", "id"])
    col_def = [
        ppart.ColumnDefinition(
            CACHE["schema"],
            target_table,
            "id",
            data_type="uuid",
            using="uuid_generate_v4()",
            null=False,
            default=ppart.Default('uuid_generate_v4()'),
        ),
    ]
    override_constraints = [
        ppart.ConstraintDefinition(
            CACHE["schema"], target_table, {
                "constraint_name": "ocpallcost_acct_summ_net_fk",
                "constraint_type": "f",
                "constraint_columns": None,
                "definition": """
FOREIGN KEY (account_alias_id) REFERENCES reporting_awsaccountalias(id) DEFERRABLE INITIALLY DEFERRED
""",
            }
        )
    ]
    override_indexes = [
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_net_cluster_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_net_cluster_id ON reporting_ocpall_network_summary USING btree (cluster_id) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_net_cluster_alias",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_net_cluster_alias ON reporting_ocpall_network_summary USING btree (cluster_alias) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_net_cluster_alias_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_net_cluster_alias_ilike ON reporting_ocpall_network_summary USING gin (upper((cluster_alias)::text) gin_trgm_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_net_account_id_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_net_account_id_ilike ON reporting_ocpall_network_summary USING gin (upper((usage_account_id)::text) gin_trgm_ops) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_net_account_alias_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_account_account_alias_id ON reporting_ocpall_network_summary USING btree (account_alias_id);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_net_product_code",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_net_product_code ON reporting_ocpall_network_summary USING btree (product_code) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_net_product_code_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_net_product_code_ilike ON reporting_ocpall_network_summary USING gin (upper((product_code)::text) gin_trgm_ops);
""",
            }
        ),
    ]
    cols = ppart.ConvertToPartition.get_table_columns(CACHE["schema"], matview_name)
    cols.remove('id')
    column_map = dict(zip(cols, cols))

    convert_matview_to_partitioned_table(
        matview_name,
        "usage_start",
        pk_def,
        col_def,
        indexes=override_indexes,
        column_map=column_map,
        constraints=override_constraints
    )


def convert_reporting_ocpall_storage_summary(apps, schema_editor):
    matview_name = 'reporting_ocpall_storage_summary'
    target_table = "p_" + matview_name
    LOG.info(f"Preparing to convert materialized view {matview_name} to a partitioned table")
    pk_name = f"{matview_name[len('reporting_'):]}_pkey"
    pk_def = ppart.PKDefinition(pk_name, ["usage_start", "id"])
    col_def = [
        ppart.ColumnDefinition(
            CACHE["schema"],
            target_table,
            "id",
            data_type="uuid",
            using="uuid_generate_v4()",
            null=False,
            default=ppart.Default('uuid_generate_v4()'),
        ),
    ]
    override_constraints = [
        ppart.ConstraintDefinition(
            CACHE["schema"], target_table, {
                "constraint_name": "ocpallcost_acct_summ_stor_fk",
                "constraint_type": "f",
                "constraint_columns": None,
                "definition": """
FOREIGN KEY (account_alias_id) REFERENCES reporting_awsaccountalias(id) DEFERRABLE INITIALLY DEFERRED
""",
            }
        )
    ]
    override_indexes = [
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_stor_cluster_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_stor_cluster_id ON reporting_ocpall_storage_summary USING btree (cluster_id) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_stor_cluster_alias",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_stor_cluster_alias ON reporting_ocpall_storage_summary USING btree (cluster_alias) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_stor_cluster_alias_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_stor_cluster_alias_ilike ON reporting_ocpall_storage_summary USING gin (upper((cluster_alias)::text) gin_trgm_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_stor_account_id_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_stor_account_id_ilike ON reporting_ocpall_storage_summary USING gin (upper((usage_account_id)::text) gin_trgm_ops) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_stor_account_alias_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_account_account_alias_id ON reporting_ocpall_storage_summary USING btree (account_alias_id);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_stor_product_code",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_stor_product_code ON reporting_ocpall_storage_summary USING btree (product_code) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_stor_product_code_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_stor_product_code_ilike ON reporting_ocpall_storage_summary USING gin (upper((product_code)::text) gin_trgm_ops);
""",
            }
        ),
    ]
    cols = ppart.ConvertToPartition.get_table_columns(CACHE["schema"], matview_name)
    cols.remove('id')
    column_map = dict(zip(cols, cols))

    convert_matview_to_partitioned_table(
        matview_name,
        "usage_start",
        pk_def,
        col_def,
        indexes=override_indexes,
        column_map=column_map,
        constraints=override_constraints
    )


def convert_reporting_ocpall_database_summary(apps, schema_editor):
    matview_name = 'reporting_ocpall_database_summary'
    target_table = "p_" + matview_name
    LOG.info(f"Preparing to convert materialized view {matview_name} to a partitioned table")
    pk_name = f"{matview_name[len('reporting_'):]}_pkey"
    pk_def = ppart.PKDefinition(pk_name, ["usage_start", "id"])
    col_def = [
        ppart.ColumnDefinition(
            CACHE["schema"],
            target_table,
            "id",
            data_type="uuid",
            using="uuid_generate_v4()",
            null=False,
            default=ppart.Default('uuid_generate_v4()'),
        ),
    ]
    override_constraints = [
        ppart.ConstraintDefinition(
            CACHE["schema"], target_table, {
                "constraint_name": "ocpallcost_acct_summ_db_fk",
                "constraint_type": "f",
                "constraint_columns": None,
                "definition": """
FOREIGN KEY (account_alias_id) REFERENCES reporting_awsaccountalias(id) DEFERRABLE INITIALLY DEFERRED
""",
            }
        )
    ]
    override_indexes = [
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_db_cluster_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_db_cluster_id ON reporting_ocpall_database_summary USING btree (cluster_id) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_db_cluster_alias",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_db_cluster_alias ON reporting_ocpall_database_summary USING btree (cluster_alias) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_db_cluster_alias_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_db_cluster_alias_ilike ON reporting_ocpall_database_summary USING gin (upper((cluster_alias)::text) gin_trgm_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_db_account_id_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_db_account_id_ilike ON reporting_ocpall_database_summary USING gin (upper((usage_account_id)::text) gin_trgm_ops) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_db_account_alias_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_account_account_alias_id ON reporting_ocpall_database_summary USING btree (account_alias_id);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_db_product_code",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_db_product_code ON reporting_ocpall_database_summary USING btree (product_code) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_db_product_code_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_db_product_code_ilike ON reporting_ocpall_database_summary USING gin (upper((product_code)::text) gin_trgm_ops);
""",
            }
        ),
    ]
    cols = ppart.ConvertToPartition.get_table_columns(CACHE["schema"], matview_name)
    cols.remove('id')
    column_map = dict(zip(cols, cols))

    convert_matview_to_partitioned_table(
        matview_name,
        "usage_start",
        pk_def,
        col_def,
        indexes=override_indexes,
        column_map=column_map,
        constraints=override_constraints
    )


def convert_reporting_ocpall_cost_summary_by_service(apps, schema_editor):
    matview_name = 'reporting_ocpall_cost_summary_by_service'
    target_table = "p_" + matview_name
    LOG.info(f"Preparing to convert materialized view {matview_name} to a partitioned table")
    pk_name = f"{matview_name[len('reporting_'):]}_pkey"
    pk_def = ppart.PKDefinition(pk_name, ["usage_start", "id"])
    col_def = [
        ppart.ColumnDefinition(
            CACHE["schema"],
            target_table,
            "id",
            data_type="uuid",
            using="uuid_generate_v4()",
            null=False,
            default=ppart.Default('uuid_generate_v4()'),
        ),
    ]
    override_constraints = [
        ppart.ConstraintDefinition(
            CACHE["schema"], target_table, {
                "constraint_name": "ocpallcost_acct_summ_service_fk",
                "constraint_type": "f",
                "constraint_columns": None,
                "definition": """
FOREIGN KEY (account_alias_id) REFERENCES reporting_awsaccountalias(id) DEFERRABLE INITIALLY DEFERRED
""",
            }
        )
    ]
    override_indexes = [
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_service_cluster_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_service_cluster_id ON reporting_ocpall_cost_summary_by_service USING btree (cluster_id) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_service_cluster_alias",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_service_cluster_alias ON reporting_ocpall_cost_summary_by_service USING btree (cluster_alias) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_service_cluster_alias_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_service_cluster_alias_ilike ON reporting_ocpall_cost_summary_by_service USING gin (upper((cluster_alias)::text) gin_trgm_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_service_account_id_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_service_account_id_ilike ON reporting_ocpall_cost_summary_by_service USING gin (upper((usage_account_id)::text) gin_trgm_ops) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_service_account_alias_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_account_account_alias_id ON reporting_ocpall_cost_summary_by_service USING btree (account_alias_id);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_service_product_code",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_service_product_code ON reporting_ocpall_cost_summary_by_service USING btree (product_code) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_service_product_code_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_service_product_code_ilike ON reporting_ocpall_cost_summary_by_service USING gin (upper((product_code)::text) gin_trgm_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_service_product_family",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_service_product_family ON reporting_ocpall_cost_summary_by_service USING btree (product_family) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_service_product_family_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_service_product_family_ilike ON reporting_ocpall_cost_summary_by_service USING gin (upper((product_family)::text) gin_trgm_ops);
""",
            }
        ),
    ]
    cols = ppart.ConvertToPartition.get_table_columns(CACHE["schema"], matview_name)
    cols.remove('id')
    column_map = dict(zip(cols, cols))

    convert_matview_to_partitioned_table(
        matview_name,
        "usage_start",
        pk_def,
        col_def,
        indexes=override_indexes,
        column_map=column_map,
        constraints=override_constraints
    )


def convert_reporting_ocpall_cost_summary_by_region(apps, schema_editor):
    matview_name = 'reporting_ocpall_cost_summary_by_region'
    target_table = "p_" + matview_name
    LOG.info(f"Preparing to convert materialized view {matview_name} to a partitioned table")
    pk_name = f"{matview_name[len('reporting_'):]}_pkey"
    pk_def = ppart.PKDefinition(pk_name, ["usage_start", "id"])
    col_def = [
        ppart.ColumnDefinition(
            CACHE["schema"],
            target_table,
            "id",
            data_type="uuid",
            using="uuid_generate_v4()",
            null=False,
            default=ppart.Default('uuid_generate_v4()'),
        ),
    ]
    override_constraints = [
        ppart.ConstraintDefinition(
            CACHE["schema"], target_table, {
                "constraint_name": "ocpallcost_acct_summ_region_fk",
                "constraint_type": "f",
                "constraint_columns": None,
                "definition": """
FOREIGN KEY (account_alias_id) REFERENCES reporting_awsaccountalias(id) DEFERRABLE INITIALLY DEFERRED
""",
            }
        )
    ]
    override_indexes = [
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_region_cluster_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_region_cluster_id ON reporting_ocpall_cost_summary_by_region USING btree (cluster_id) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_region_cluster_alias",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_region_cluster_alias ON reporting_ocpall_cost_summary_by_region USING btree (cluster_alias) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_region_cluster_alias_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_region_cluster_alias_ilike ON reporting_ocpall_cost_summary_by_region USING gin (upper((cluster_alias)::text) gin_trgm_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_region_region",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_region_region ON reporting_ocpall_cost_summary_by_region USING btree (region) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_region_account_id_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_region_account_id_ilike ON reporting_ocpall_cost_summary_by_region USING gin (upper((usage_account_id)::text) gin_trgm_ops) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_region_account_alias_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_account_account_alias_id ON reporting_ocpall_cost_summary_by_region USING btree (account_alias_id);
""",
            }
        ),
    ]
    cols = ppart.ConvertToPartition.get_table_columns(CACHE["schema"], matview_name)
    cols.remove('id')
    column_map = dict(zip(cols, cols))

    convert_matview_to_partitioned_table(
        matview_name,
        "usage_start",
        pk_def,
        col_def,
        indexes=override_indexes,
        column_map=column_map,
        constraints=override_constraints
    )


def convert_reporting_ocpall_cost_summary_by_account(apps, schema_editor):
    matview_name = 'reporting_ocpall_cost_summary_by_account'
    target_table = "p_" + matview_name
    LOG.info(f"Preparing to convert materialized view {matview_name} to a partitioned table")
    pk_name = f"{matview_name[len('reporting_'):]}_pkey"
    pk_def = ppart.PKDefinition(pk_name, ["usage_start", "id"])
    col_def = [
        ppart.ColumnDefinition(
            CACHE["schema"],
            target_table,
            "id",
            data_type="uuid",
            using="uuid_generate_v4()",
            null=False,
            default=ppart.Default('uuid_generate_v4()'),
        ),
    ]
    override_constraints = [
        ppart.ConstraintDefinition(
            CACHE["schema"], target_table, {
                "constraint_name": "ocpallcost_acct_summ_account_fk",
                "constraint_type": "f",
                "constraint_columns": None,
                "definition": """
FOREIGN KEY (account_alias_id) REFERENCES reporting_awsaccountalias(id) DEFERRABLE INITIALLY DEFERRED
""",
            }
        )
    ]
    override_indexes = [
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_account_cluster_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_account_cluster_id ON reporting_ocpall_cost_summary_by_account USING btree (cluster_id) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_account_cluster_alias",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_account_cluster_alias ON reporting_ocpall_cost_summary_by_account USING btree (cluster_alias) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_account_cluster_alias_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_account_cluster_alias_ilike ON reporting_ocpall_cost_summary_by_account USING gin (upper((cluster_alias)::text) gin_trgm_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_account_account_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_account_account_id ON reporting_ocpall_cost_summary_by_account USING btree (usage_account_id) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_account_account_id_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_account_account_id_ilike ON reporting_ocpall_cost_summary_by_account USING gin (upper((usage_account_id)::text) gin_trgm_ops) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_by_account_account_alias_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_by_account_account_alias_id ON reporting_ocpall_cost_summary_by_account USING btree (account_alias_id);
""",
            }
        ),
    ]
    cols = ppart.ConvertToPartition.get_table_columns(CACHE["schema"], matview_name)
    cols.remove('id')
    column_map = dict(zip(cols, cols))

    convert_matview_to_partitioned_table(
        matview_name,
        "usage_start",
        pk_def,
        col_def,
        indexes=override_indexes,
        column_map=column_map,
        constraints=override_constraints
    )


def convert_reporting_ocpall_cost_summary(apps, schema_editor):
    matview_name = 'reporting_ocpall_cost_summary'
    target_table = "p_" + matview_name
    LOG.info(f"Preparing to convert materialized view {matview_name} to a partitioned table")
    pk_name = f"{matview_name[len('reporting_'):]}_pkey"
    pk_def = ppart.PKDefinition(pk_name, ["usage_start", "id"])
    col_def = [
        ppart.ColumnDefinition(
            CACHE["schema"],
            target_table,
            "id",
            data_type="uuid",
            using="uuid_generate_v4()",
            null=False,
            default=ppart.Default('uuid_generate_v4()'),
        ),
    ]
    override_indexes = [
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_cluster_id",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_cluster_id ON reporting_ocpall_cost_summary USING btree (cluster_id) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_cluster_alias",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_cluster_alias ON reporting_ocpall_cost_summary USING btree (cluster_alias) ;
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_cost_summary_cluster_alias_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_cost_summary_cluster_alias_ilike ON reporting_ocpall_cost_summary USING gin (upper((cluster_alias)::text) gin_trgm_ops);
""",
            }
        ),
    ]
    cols = ppart.ConvertToPartition.get_table_columns(CACHE["schema"], matview_name)
    cols.remove('id')
    column_map = dict(zip(cols, cols))

    convert_matview_to_partitioned_table(
        matview_name,
        "usage_start",
        pk_def,
        col_def,
        indexes=override_indexes,
        column_map=column_map,
    )


def convert_reporting_ocpallcostlineitem_daily_summary(apps, schema_editor):
    matview_name = "reporting_ocpallcostlineitem_daily_summary"
    target_table = "p_" + matview_name
    LOG.info(f"Preparing to convert materialized view {matview_name} to a partitioned table")
    pk_name = f"{matview_name[len('reporting_'):]}_pkey"
    pk_def = ppart.PKDefinition(pk_name, ["usage_start", "id"])
    col_def = [
        ppart.ColumnDefinition(
            CACHE["schema"],
            target_table,
            "id",
            data_type="uuid",
            using="uuid_generate_v4()",
            null=False,
            default=ppart.Default('uuid_generate_v4()'),
        ),
    ]
    override_constraints = [
        ppart.ConstraintDefinition(
            CACHE["schema"], target_table, {
                "constraint_name": "ocpallcost_ds_account_alias_fk",
                "constraint_type": "f",
                "constraint_columns": None,
                "definition": """
FOREIGN KEY (account_alias_id) REFERENCES reporting_awsaccountalias(id) DEFERRABLE INITIALLY DEFERRED
""",
            }
        )
    ]
    override_indexes = [
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_product_code_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_product_code_ilike ON reporting_ocpallcostlineitem_daily_summary USING gin (upper((product_code)::text) gin_trgm_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_product_family_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_product_family_ilike ON reporting_ocpallcostlineitem_daily_summary USING gin (upper((product_family)::text) gin_trgm_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpallcstdlysumm_node",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpallcstdlysumm_node ON reporting_ocpallcostlineitem_daily_summary USING btree (node text_pattern_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpallcstdlysumm_node_like",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpallcstdlysumm_node_like ON reporting_ocpallcostlineitem_daily_summary USING gin (node gin_trgm_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpallcstdlysumm_nsp",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpallcstdlysumm_nsp ON reporting_ocpallcostlineitem_daily_summary USING gin (namespace);
""",
            }
        ),
    ]
    cols = ppart.ConvertToPartition.get_table_columns(CACHE["schema"], matview_name)
    cols.remove('id')
    column_map = dict(zip(cols, cols))

    convert_matview_to_partitioned_table(
        matview_name,
        "usage_start",
        pk_def,
        col_def,
        indexes=override_indexes,
        column_map=column_map,
        constraints=override_constraints
    )


def convert_reporting_ocpallcostlineitem_project_daily_summary(apps, schema_editor):
    matview_name = "reporting_ocpallcostlineitem_project_daily_summary"
    target_table = "p_" + matview_name
    LOG.info(f"Preparing to convert materialized view {matview_name} to a partitioned table")
    pk_name = f"{matview_name[len('reporting_'):]}_pkey"
    pk_def = ppart.PKDefinition(pk_name, ["usage_start", "id"])
    col_def = [
        ppart.ColumnDefinition(
            CACHE["schema"],
            target_table,
            "id",
            data_type="uuid",
            using="uuid_generate_v4()",
            null=False,
            default=ppart.Default('uuid_generate_v4()'),
        ),
    ]
    override_constraints = [
        ppart.ConstraintDefinition(
            CACHE["schema"], target_table, {
                "constraint_name": "ocpallcost_project_ds_account_alias_fk",
                "constraint_type": "f",
                "constraint_columns": None,
                "definition": """
FOREIGN KEY (account_alias_id) REFERENCES reporting_awsaccountalias(id) DEFERRABLE INITIALLY DEFERRED
""",
            }
        )
    ]
    override_indexes = [
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpallcstprjdlysumm_node",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpallcstprjdlysumm_node ON reporting_ocpallcostlineitem_project_daily_summary (node text_pattern_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpallcstprjdlysumm_nsp",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpallcstprjdlysumm_nsp ON reporting_ocpallcostlineitem_project_daily_summary (namespace text_pattern_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpallcstprjdlysumm_node_like",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpallcstprjdlysumm_node_like ON reporting_ocpallcostlineitem_project_daily_summary USING GIN (node gin_trgm_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpallcstprjdlysumm_nsp_like",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpallcstprjdlysumm_nsp_like ON reporting_ocpallcostlineitem_project_daily_summary USING GIN (namespace gin_trgm_ops);
""",
            }
        ),
        ppart.IndexDefinition(
            CACHE["schema"], target_table, {
                "schemaname": None,
                "tablename": None,
                "indexname": "ocpall_product_family_ilike",
                "indexcols": None,
                "indisunique": None,
                "indexdef": """
CREATE INDEX ocpall_product_family_ilike ON reporting_ocpallcostlineitem_daily_summary USING GIN (upper(product_family) gin_trgm_ops);
""",
            }
        ),
    ]
    cols = ppart.ConvertToPartition.get_table_columns(CACHE["schema"], matview_name)
    cols.remove('id')
    column_map = dict(zip(cols, cols))

    convert_matview_to_partitioned_table(
        matview_name,
        "usage_start",
        pk_def,
        col_def,
        indexes=override_indexes,
        column_map=column_map,
        constraints=override_constraints
    )


class Migration(migrations.Migration):

    dependencies = [
        ('reporting', '0186_subpartition_cols'),
    ]

    operations = [
        migrations.RunPython(resolve_schema),
        migrations.RunPython(convert_reporting_ocpall_compute_summary),
        migrations.RunPython(convert_reporting_ocpall_network_summary),
        migrations.RunPython(convert_reporting_ocpall_storage_summary),
        migrations.RunPython(convert_reporting_ocpall_database_summary),
        migrations.RunPython(convert_reporting_ocpall_cost_summary_by_service),
        migrations.RunPython(convert_reporting_ocpall_cost_summary_by_region),
        migrations.RunPython(convert_reporting_ocpall_cost_summary_by_account),
        migrations.RunPython(convert_reporting_ocpall_cost_summary),
        migrations.RunPython(convert_reporting_ocpallcostlineitem_daily_summary),
    ]
